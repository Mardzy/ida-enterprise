// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`The login form component renders without error 1`] = `
<Provider
  store={
    Object {
      "dispatch": [Function],
      "getState": [Function],
      "replaceReducer": [Function],
      "subscribe": [Function],
      Symbol(observable): [Function],
    }
  }
>
  <ReduxForm>
    <Connect(Form(Component))
      destroyOnUnmount={true}
      enableReinitialize={false}
      forceUnregisterOnUnmount={false}
      form="test"
      getFormState={[Function]}
      keepDirtyOnReinitialize={false}
      persistentSubmitErrors={false}
      pure={true}
      shouldAsyncValidate={[Function]}
      shouldError={[Function]}
      shouldValidate={[Function]}
      shouldWarn={[Function]}
      touchOnBlur={true}
      touchOnChange={false}
      updateUnregisteredFields={false}
    >
      <Form(Component)
        anyTouched={false}
        array={
          Object {
            "insert": [Function],
            "move": [Function],
            "pop": [Function],
            "push": [Function],
            "remove": [Function],
            "removeAll": [Function],
            "shift": [Function],
            "splice": [Function],
            "swap": [Function],
            "unshift": [Function],
          }
        }
        arrayInsert={[Function]}
        arrayMove={[Function]}
        arrayPop={[Function]}
        arrayPush={[Function]}
        arrayRemove={[Function]}
        arrayRemoveAll={[Function]}
        arrayShift={[Function]}
        arraySplice={[Function]}
        arraySwap={[Function]}
        arrayUnshift={[Function]}
        asyncValidating={false}
        autofill={[Function]}
        blur={[Function]}
        change={[Function]}
        clearAsyncError={[Function]}
        clearFields={[Function]}
        clearSubmit={[Function]}
        clearSubmitErrors={[Function]}
        destroy={[Function]}
        destroyOnUnmount={true}
        dirty={false}
        dispatch={[Function]}
        enableReinitialize={false}
        focus={[Function]}
        forceUnregisterOnUnmount={false}
        form="test"
        getFormState={[Function]}
        initialize={[Function]}
        initialized={false}
        invalid={false}
        keepDirtyOnReinitialize={false}
        persistentSubmitErrors={false}
        pristine={true}
        pure={true}
        registerField={[Function]}
        reset={[Function]}
        resetSection={[Function]}
        setSubmitFailed={[Function]}
        setSubmitSucceeded={[Function]}
        shouldAsyncValidate={[Function]}
        shouldError={[Function]}
        shouldValidate={[Function]}
        shouldWarn={[Function]}
        startAsyncValidation={[Function]}
        startSubmit={[Function]}
        stopAsyncValidation={[Function]}
        stopSubmit={[Function]}
        submit={[Function]}
        submitFailed={false}
        submitSucceeded={false}
        submitting={false}
        syncErrors={Object {}}
        syncWarnings={Object {}}
        touch={[Function]}
        touchOnBlur={true}
        touchOnChange={false}
        unregisterField={[Function]}
        untouch={[Function]}
        updateSyncErrors={[Function]}
        updateSyncWarnings={[Function]}
        updateUnregisteredFields={false}
        valid={true}
        validExceptSubmit={true}
        values={Object {}}
      >
        <Component
          anyTouched={false}
          array={
            Object {
              "insert": [Function],
              "move": [Function],
              "pop": [Function],
              "push": [Function],
              "remove": [Function],
              "removeAll": [Function],
              "shift": [Function],
              "splice": [Function],
              "swap": [Function],
              "unshift": [Function],
            }
          }
          asyncValidate={[Function]}
          asyncValidating={false}
          autofill={[Function]}
          blur={[Function]}
          change={[Function]}
          clearAsyncError={[Function]}
          clearFields={[Function]}
          clearSubmit={[Function]}
          clearSubmitErrors={[Function]}
          destroy={[Function]}
          dirty={false}
          dispatch={[Function]}
          form="test"
          handleSubmit={[Function]}
          initialize={[Function]}
          initialized={false}
          invalid={false}
          pristine={true}
          pure={true}
          reset={[Function]}
          resetSection={[Function]}
          submit={[Function]}
          submitFailed={false}
          submitSucceeded={false}
          submitting={false}
          touch={[Function]}
          untouch={[Function]}
          valid={true}
        >
          <form
            action="javascript:;"
            className="ui form"
          >
            <InputField
              label="Input field"
              name="field"
              placeholder="Start typing"
            >
              <Field
                component={[Function]}
                label="Input field"
                name="field"
                placeholder="Start typing"
              >
                <Connect(ConnectedField)
                  _reduxForm={
                    Object {
                      "anyTouched": false,
                      "array": Object {
                        "insert": [Function],
                        "move": [Function],
                        "pop": [Function],
                        "push": [Function],
                        "remove": [Function],
                        "removeAll": [Function],
                        "shift": [Function],
                        "splice": [Function],
                        "swap": [Function],
                        "unshift": [Function],
                      },
                      "arrayInsert": [Function],
                      "arrayMove": [Function],
                      "arrayPop": [Function],
                      "arrayPush": [Function],
                      "arrayRemove": [Function],
                      "arrayRemoveAll": [Function],
                      "arrayShift": [Function],
                      "arraySplice": [Function],
                      "arraySwap": [Function],
                      "arrayUnshift": [Function],
                      "asyncErrors": undefined,
                      "asyncValidate": [Function],
                      "asyncValidating": false,
                      "autofill": [Function],
                      "blur": [Function],
                      "change": [Function],
                      "clearAsyncError": [Function],
                      "clearFields": [Function],
                      "clearSubmit": [Function],
                      "clearSubmitErrors": [Function],
                      "destroy": [Function],
                      "destroyOnUnmount": true,
                      "dirty": false,
                      "dispatch": [Function],
                      "enableReinitialize": false,
                      "error": undefined,
                      "focus": [Function],
                      "forceUnregisterOnUnmount": false,
                      "form": "test",
                      "getFormState": [Function],
                      "getValues": [Function],
                      "initialValues": undefined,
                      "initialize": [Function],
                      "initialized": false,
                      "invalid": false,
                      "keepDirtyOnReinitialize": false,
                      "persistentSubmitErrors": false,
                      "pristine": true,
                      "pure": true,
                      "register": [Function],
                      "registerField": [Function],
                      "registerInnerOnSubmit": [Function],
                      "registeredFields": undefined,
                      "reset": [Function],
                      "resetSection": [Function],
                      "sectionPrefix": undefined,
                      "setSubmitFailed": [Function],
                      "setSubmitSucceeded": [Function],
                      "shouldAsyncValidate": [Function],
                      "shouldError": [Function],
                      "shouldValidate": [Function],
                      "shouldWarn": [Function],
                      "startAsyncValidation": [Function],
                      "startSubmit": [Function],
                      "stopAsyncValidation": [Function],
                      "stopSubmit": [Function],
                      "submit": [Function],
                      "submitFailed": false,
                      "submitSucceeded": false,
                      "submitting": false,
                      "syncErrors": Object {},
                      "syncWarnings": Object {},
                      "touch": [Function],
                      "touchOnBlur": true,
                      "touchOnChange": false,
                      "triggerSubmit": undefined,
                      "unregister": [Function],
                      "unregisterField": [Function],
                      "untouch": [Function],
                      "updateSyncErrors": [Function],
                      "updateSyncWarnings": [Function],
                      "updateUnregisteredFields": false,
                      "valid": true,
                      "validExceptSubmit": true,
                      "values": Object {},
                      "warning": undefined,
                    }
                  }
                  component={[Function]}
                  label="Input field"
                  name="field"
                  normalize={[Function]}
                  placeholder="Start typing"
                >
                  <ConnectedField
                    _reduxForm={
                      Object {
                        "anyTouched": false,
                        "array": Object {
                          "insert": [Function],
                          "move": [Function],
                          "pop": [Function],
                          "push": [Function],
                          "remove": [Function],
                          "removeAll": [Function],
                          "shift": [Function],
                          "splice": [Function],
                          "swap": [Function],
                          "unshift": [Function],
                        },
                        "arrayInsert": [Function],
                        "arrayMove": [Function],
                        "arrayPop": [Function],
                        "arrayPush": [Function],
                        "arrayRemove": [Function],
                        "arrayRemoveAll": [Function],
                        "arrayShift": [Function],
                        "arraySplice": [Function],
                        "arraySwap": [Function],
                        "arrayUnshift": [Function],
                        "asyncErrors": undefined,
                        "asyncValidate": [Function],
                        "asyncValidating": false,
                        "autofill": [Function],
                        "blur": [Function],
                        "change": [Function],
                        "clearAsyncError": [Function],
                        "clearFields": [Function],
                        "clearSubmit": [Function],
                        "clearSubmitErrors": [Function],
                        "destroy": [Function],
                        "destroyOnUnmount": true,
                        "dirty": false,
                        "dispatch": [Function],
                        "enableReinitialize": false,
                        "error": undefined,
                        "focus": [Function],
                        "forceUnregisterOnUnmount": false,
                        "form": "test",
                        "getFormState": [Function],
                        "getValues": [Function],
                        "initialValues": undefined,
                        "initialize": [Function],
                        "initialized": false,
                        "invalid": false,
                        "keepDirtyOnReinitialize": false,
                        "persistentSubmitErrors": false,
                        "pristine": true,
                        "pure": true,
                        "register": [Function],
                        "registerField": [Function],
                        "registerInnerOnSubmit": [Function],
                        "registeredFields": undefined,
                        "reset": [Function],
                        "resetSection": [Function],
                        "sectionPrefix": undefined,
                        "setSubmitFailed": [Function],
                        "setSubmitSucceeded": [Function],
                        "shouldAsyncValidate": [Function],
                        "shouldError": [Function],
                        "shouldValidate": [Function],
                        "shouldWarn": [Function],
                        "startAsyncValidation": [Function],
                        "startSubmit": [Function],
                        "stopAsyncValidation": [Function],
                        "stopSubmit": [Function],
                        "submit": [Function],
                        "submitFailed": false,
                        "submitSucceeded": false,
                        "submitting": false,
                        "syncErrors": Object {},
                        "syncWarnings": Object {},
                        "touch": [Function],
                        "touchOnBlur": true,
                        "touchOnChange": false,
                        "triggerSubmit": undefined,
                        "unregister": [Function],
                        "unregisterField": [Function],
                        "untouch": [Function],
                        "updateSyncErrors": [Function],
                        "updateSyncWarnings": [Function],
                        "updateUnregisteredFields": false,
                        "valid": true,
                        "validExceptSubmit": true,
                        "values": Object {},
                        "warning": undefined,
                      }
                    }
                    asyncValidating={false}
                    component={[Function]}
                    dirty={false}
                    dispatch={[Function]}
                    label="Input field"
                    name="field"
                    normalize={[Function]}
                    placeholder="Start typing"
                    pristine={true}
                  >
                    <renderField
                      input={
                        Object {
                          "name": "field",
                          "onBlur": [Function],
                          "onChange": [Function],
                          "onDragStart": [Function],
                          "onDrop": [Function],
                          "onFocus": [Function],
                          "value": "",
                        }
                      }
                      label="Input field"
                      meta={
                        Object {
                          "active": false,
                          "asyncValidating": false,
                          "autofilled": false,
                          "dirty": false,
                          "dispatch": [Function],
                          "error": undefined,
                          "form": "test",
                          "initial": undefined,
                          "invalid": false,
                          "pristine": true,
                          "submitFailed": false,
                          "submitting": false,
                          "touched": false,
                          "valid": true,
                          "visited": false,
                          "warning": undefined,
                        }
                      }
                      placeholder="Start typing"
                    >
                      <FormField
                        error={false}
                      >
                        <div
                          className="field"
                        >
                          <label>
                            Input field
                          </label>
                          <Input
                            name="field"
                            onBlur={[Function]}
                            onChange={[Function]}
                            onDragStart={[Function]}
                            onDrop={[Function]}
                            onFocus={[Function]}
                            placeholder="Start typing"
                            type="text"
                            value=""
                          >
                            <div
                              className="ui input"
                            >
                              <input
                                name="field"
                                onBlur={[Function]}
                                onChange={[Function]}
                                onDragStart={[Function]}
                                onDrop={[Function]}
                                onFocus={[Function]}
                                placeholder="Start typing"
                                type="text"
                                value=""
                              />
                            </div>
                          </Input>
                        </div>
                      </FormField>
                    </renderField>
                  </ConnectedField>
                </Connect(ConnectedField)>
              </Field>
            </InputField>
          </form>
        </Component>
      </Form(Component)>
    </Connect(Form(Component))>
  </ReduxForm>
</Provider>
`;
